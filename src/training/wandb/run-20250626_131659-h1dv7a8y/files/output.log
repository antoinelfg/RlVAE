✅ Created open loop trainer for cyclic sequences
   🎯 Experiment: open_cyclic_20250626_131659
   🔁 Loop mode: open
   📊 Cycle penalty: 1.0
   🚀 Riemannian: True (geodesic)

🚀 Starting OPEN loop training on cyclic sequences
Loading cyclic sprites data from /scratch/alaforgu/longitudinal_experiments/RlVAE/data/processed/Sprites_train_cyclic.pt...
Cyclic sprites data shape: torch.Size([3000, 8, 3, 64, 64])
Data range: [0.000, 0.996]
✅ train cyclic dataset size: 10
✅ Final data shape: torch.Size([10, 8, 3, 64, 64])
✅ Final data range: [0.000, 0.996]
🔍 Verifying cyclicity of first 5 sequences:
   Seq 0: MSE = 0.00e+00
   Seq 1: MSE = 0.00e+00
   Seq 2: MSE = 0.00e+00
   Seq 3: MSE = 0.00e+00
   Seq 4: MSE = 0.00e+00
Loading cyclic sprites data from /scratch/alaforgu/longitudinal_experiments/RlVAE/data/processed/Sprites_train_cyclic.pt...
Cyclic sprites data shape: torch.Size([3000, 8, 3, 64, 64])
Data range: [0.000, 0.996]
✅ train cyclic dataset size: 5
✅ Final data shape: torch.Size([5, 8, 3, 64, 64])
✅ Final data range: [0.000, 0.996]
🔍 Verifying cyclicity of first 5 sequences:
   Seq 0: MSE = 0.00e+00
   Seq 1: MSE = 0.00e+00
   Seq 2: MSE = 0.00e+00
   Seq 3: MSE = 0.00e+00
   Seq 4: MSE = 0.00e+00

📈 Epoch 1/1 - OPEN Mode
Epoch 0 (open): 100%|█| 5/5 [00:02<00:00,  2.19it/s, Loss=2194.5103, Recon=2126.
🧠 USING RIEMANNIAN METRIC-AWARE POSTERIOR (batch_size=2)
🧠 Creating sequence trajectory visualization for epoch 0
🎬 Creating comprehensive reconstruction visualization for epoch 0
🔬 Creating manifold visualizations for epoch 0
📊 Analyzing 2 sequences with 8 timesteps
📍 Computing metrics for timestep 1/8 using flow-evolved coordinates
   Computing G(z) at 100 flow-evolved points...
   ✅ Computed metrics: det(G⁻¹) range [5.23e-20, 1.82e-05]
   ✅ Timestep 0 data collected (metrics: 7 properties)
📍 Computing metrics for timestep 2/8 using flow-evolved coordinates
   Computing G(z) at 100 flow-evolved points...
   ✅ Computed metrics: det(G⁻¹) range [2.63e-22, 7.16e-05]
   ✅ Timestep 1 data collected (metrics: 7 properties)
📍 Computing metrics for timestep 3/8 using flow-evolved coordinates
   Computing G(z) at 100 flow-evolved points...
   ✅ Computed metrics: det(G⁻¹) range [8.88e-23, 1.34e-06]
   ✅ Timestep 2 data collected (metrics: 7 properties)
📍 Computing metrics for timestep 4/8 using flow-evolved coordinates
   Computing G(z) at 100 flow-evolved points...
   ✅ Computed metrics: det(G⁻¹) range [7.40e-21, 7.62e-05]
   ✅ Timestep 3 data collected (metrics: 7 properties)
📍 Computing metrics for timestep 5/8 using flow-evolved coordinates
   Computing G(z) at 100 flow-evolved points...
   ✅ Computed metrics: det(G⁻¹) range [2.54e-22, 7.84e-05]
   ✅ Timestep 4 data collected (metrics: 7 properties)
📍 Computing metrics for timestep 6/8 using flow-evolved coordinates
   Computing G(z) at 100 flow-evolved points...
   ✅ Computed metrics: det(G⁻¹) range [1.30e-21, 2.41e-03]
   ✅ Timestep 5 data collected (metrics: 7 properties)
📍 Computing metrics for timestep 7/8 using flow-evolved coordinates
   Computing G(z) at 100 flow-evolved points...
   ✅ Computed metrics: det(G⁻¹) range [1.77e-19, 2.52e-03]
   ✅ Timestep 6 data collected (metrics: 7 properties)
📍 Computing metrics for timestep 8/8 using flow-evolved coordinates
   Computing G(z) at 100 flow-evolved points...
   ✅ Computed metrics: det(G⁻¹) range [1.14e-21, 5.98e-04]
   ✅ Timestep 7 data collected (metrics: 7 properties)
🎨 Creating visualizations with metrics for 8 timesteps...
📈 Creating enhanced PCA analysis with flow-evolved coordinates...
✅ Enhanced PCA analysis created: 8/8 timesteps have metrics
🔥 Creating enhanced manifold heatmaps with flow-evolved coordinates...
✅ Enhanced manifold heatmaps created
⏱️ Creating temporal metric analysis...
✅ Temporal metric analysis created: 8/8 timesteps analyzed
✨ Manifold visualizations complete for epoch 0
🌍 Creating enhanced geodesic & metric impact visualizations for epoch 0
🌍 Creating INTERACTIVE geodesic slider visualization with timestep evolution...
📊 Computing DYNAMIC geodesic background fields for each timestep...
   Computing background fields for timestep 0...
     ✅ Geodesic background computed for t=0: det(G) range [1.33e-01, 2.07e+03]
   Computing background fields for timestep 1...
     🔄 Applying 1 forward flow steps to geodesic grid...
       Applying flow 0: z_0 → z_1
     ✅ Geodesic grid transformed to timestep 1 coordinate system
     ✅ Geodesic background computed for t=1: det(G) range [1.29e-01, 2.54e+03]
   Computing background fields for timestep 2...
     🔄 Applying 2 forward flow steps to geodesic grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
     ✅ Geodesic grid transformed to timestep 2 coordinate system
     ✅ Geodesic background computed for t=2: det(G) range [1.43e-01, 3.41e+03]
   Computing background fields for timestep 3...
     🔄 Applying 3 forward flow steps to geodesic grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
       Applying flow 2: z_2 → z_3
     ✅ Geodesic grid transformed to timestep 3 coordinate system
     ✅ Geodesic background computed for t=3: det(G) range [1.09e-01, 2.77e+03]
   Computing background fields for timestep 4...
     🔄 Applying 4 forward flow steps to geodesic grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
       Applying flow 2: z_2 → z_3
       Applying flow 3: z_3 → z_4
     ✅ Geodesic grid transformed to timestep 4 coordinate system
     ✅ Geodesic background computed for t=4: det(G) range [1.08e-01, 2.27e+03]
   Computing background fields for timestep 5...
     🔄 Applying 5 forward flow steps to geodesic grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
       Applying flow 2: z_2 → z_3
       Applying flow 3: z_3 → z_4
       Applying flow 4: z_4 → z_5
     ✅ Geodesic grid transformed to timestep 5 coordinate system
     ✅ Geodesic background computed for t=5: det(G) range [1.04e-01, 1.25e+03]
   Computing background fields for timestep 6...
     🔄 Applying 6 forward flow steps to geodesic grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
       Applying flow 2: z_2 → z_3
       Applying flow 3: z_3 → z_4
       Applying flow 4: z_4 → z_5
       Applying flow 5: z_5 → z_6
     ✅ Geodesic grid transformed to timestep 6 coordinate system
     ✅ Geodesic background computed for t=6: det(G) range [8.65e-02, 8.04e+02]
   Computing background fields for timestep 7...
     🔄 Applying 7 forward flow steps to geodesic grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
       Applying flow 2: z_2 → z_3
       Applying flow 3: z_3 → z_4
       Applying flow 4: z_4 → z_5
       Applying flow 5: z_5 → z_6
       Applying flow 6: z_6 → z_7
     ✅ Geodesic grid transformed to timestep 7 coordinate system
     ✅ Geodesic background computed for t=7: det(G) range [1.07e-01, 1.15e+03]
    ✅ Geodesic slider: Using FLOW-EVOLVED coordinates for timestep 0
    ✅ Geodesic slider: Using FLOW-EVOLVED coordinates for timestep 1
    ✅ Geodesic slider: Using FLOW-EVOLVED coordinates for timestep 2
    ✅ Geodesic slider: Using FLOW-EVOLVED coordinates for timestep 3
    ✅ Geodesic slider: Using FLOW-EVOLVED coordinates for timestep 4
    ✅ Geodesic slider: Using FLOW-EVOLVED coordinates for timestep 5
    ✅ Geodesic slider: Using FLOW-EVOLVED coordinates for timestep 6
    ✅ Geodesic slider: Using FLOW-EVOLVED coordinates for timestep 7
   📊 Geodesic frame 0: using det_G background range [1.33e-01, 2.07e+03]
   📊 Geodesic frame 1: using det_G background range [1.29e-01, 2.54e+03]
   📊 Geodesic frame 2: using det_G background range [1.43e-01, 3.41e+03]
   📊 Geodesic frame 3: using det_G background range [1.09e-01, 2.77e+03]
   📊 Geodesic frame 4: using det_G background range [1.08e-01, 2.27e+03]
   📊 Geodesic frame 5: using det_G background range [1.04e-01, 1.25e+03]
   📊 Geodesic frame 6: using det_G background range [8.65e-02, 8.04e+02]
   📊 Geodesic frame 7: using det_G background range [1.07e-01, 1.15e+03]
/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/kaleido/__init__.py:14: UserWarning:



Warning: You have Plotly version 5.24.1, which is not compatible with this version of Kaleido (1.0.0).

This means that static image generation (e.g. `fig.write_image()`) will not work.

Please upgrade Plotly to version 6.1.1 or greater, or downgrade Kaleido to version 0.2.1.
⚠️ Interactive geodesic slider visualization failed:
Image export using the "kaleido" engine requires the kaleido package,
which can be installed using pip:
    $ pip install -U kaleido


Traceback (most recent call last):
  File "/scratch/alaforgu/longitudinal_experiments/RlVAE/src/training/train_cyclic_loop_comparison.py", line 3064, in _create_interactive_geodesic_slider_visualization
    fig.write_image(png_filename, width=1600, height=1000, scale=2)
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/plotly/basedatatypes.py", line 3835, in write_image
    return pio.write_image(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/plotly/io/_kaleido.py", line 266, in write_image
    img_data = to_image(
               ^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/plotly/io/_kaleido.py", line 132, in to_image
    raise ValueError(
ValueError:
Image export using the "kaleido" engine requires the kaleido package,
which can be installed using pip:
    $ pip install -U kaleido

✅ Enhanced geodesic visualization created for epoch 0
✨ Creating FANCY interactive geodesic visualizations...
✨ Creating FANCY interactive geodesic visualizations for epoch 0
⚠️ Fancy visualization failed:
Image export using the "kaleido" engine requires the kaleido package,
which can be installed using pip:
    $ pip install -U kaleido

Traceback (most recent call last):
  File "/scratch/alaforgu/longitudinal_experiments/RlVAE/src/training/train_cyclic_loop_comparison.py", line 3663, in create_fancy_interactive_geodesic_visualizations
    fig.write_image(png_filename, width=1600, height=1000, scale=2)
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/plotly/basedatatypes.py", line 3835, in write_image
    return pio.write_image(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/plotly/io/_kaleido.py", line 266, in write_image
    img_data = to_image(
               ^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/plotly/io/_kaleido.py", line 132, in to_image
    raise ValueError(
ValueError:
Image export using the "kaleido" engine requires the kaleido package,
which can be installed using pip:
    $ pip install -U kaleido

🎬 Creating TEMPORAL metric evolution visualization...
🌊 Creating FLOW-BASED temporal metric evolution visualization for epoch 0
🌊 Computing flow-based det(G) evolution for 2 sequences with 8 timesteps
📍 Computing base metric det(G(z_i0))...
   Base det(G) range: [4.673e+01, 7.532e+01]
🌊 Propagating det(G) through flow chain...
   Flow step 1: z_0 → z_1
     |J_flow_1| range: [0.868, 0.873]
     det(G) range: [4.056e+01, 6.577e+01]
   Flow step 2: z_1 → z_2
     |J_flow_2| range: [0.938, 0.984]
     det(G) range: [3.804e+01, 6.470e+01]
   Flow step 3: z_2 → z_3
     |J_flow_3| range: [0.963, 0.977]
     det(G) range: [3.662e+01, 6.319e+01]
   Flow step 4: z_3 → z_4
     |J_flow_4| range: [1.140, 1.156]
     det(G) range: [4.173e+01, 7.304e+01]
   Flow step 5: z_4 → z_5
     |J_flow_5| range: [0.720, 0.720]
     det(G) range: [3.006e+01, 5.261e+01]
   Flow step 6: z_5 → z_6
     |J_flow_6| range: [0.797, 0.804]
     det(G) range: [2.397e+01, 4.231e+01]
   Flow step 7: z_6 → z_7
     |J_flow_7| range: [1.178, 1.216]
     det(G) range: [2.914e+01, 4.984e+01]
✅ Flow-based evolution complete!
   Final det(G) range: [2.397e+01, 7.532e+01]
   Det(G) amplification: 0.647x
📊 PCA projection complete (explained variance: 99.0%)
🔥 Computing spatial det(G) heatmaps for each timestep...
   Computing spatial heatmap for timestep 0...
   Computing spatial heatmap for timestep 1...
     ✅ Computed heatmap for t=1: det(G) range [3.62e-06, 7.70e+23]
   Computing spatial heatmap for timestep 2...
     ✅ Computed heatmap for t=2: det(G) range [5.83e-05, 9.52e+24]
   Computing spatial heatmap for timestep 3...
     ✅ Computed heatmap for t=3: det(G) range [7.56e-06, 7.50e+22]
   Computing spatial heatmap for timestep 4...
     ✅ Computed heatmap for t=4: det(G) range [7.69e-06, 3.81e+23]
   Computing spatial heatmap for timestep 5...
     ✅ Computed heatmap for t=5: det(G) range [1.92e-06, 1.18e+23]
   Computing spatial heatmap for timestep 6...
     ✅ Computed heatmap for t=6: det(G) range [4.25e-06, 2.43e+20]
   Computing spatial heatmap for timestep 7...
     ✅ Computed heatmap for t=7: det(G) range [4.69e-05, 5.71e+21]
✅ Computed 8 spatial heatmaps with evolving det(G) fields!
⚠️ Flow-based interactive animation failed:
Image export using the "kaleido" engine requires the kaleido package,
which can be installed using pip:
    $ pip install -U kaleido

Traceback (most recent call last):
  File "/scratch/alaforgu/longitudinal_experiments/RlVAE/src/training/train_cyclic_loop_comparison.py", line 5237, in _create_flow_based_interactive_animation
    fig.write_image(png_filename, width=1600, height=900, scale=2)
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/plotly/basedatatypes.py", line 3835, in write_image
    return pio.write_image(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/plotly/io/_kaleido.py", line 266, in write_image
    img_data = to_image(
               ^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/plotly/io/_kaleido.py", line 132, in to_image
    raise ValueError(
ValueError:
Image export using the "kaleido" engine requires the kaleido package,
which can be installed using pip:
    $ pip install -U kaleido

⚠️ Interactive temporal animation failed:
Image export using the "kaleido" engine requires the kaleido package,
which can be installed using pip:
    $ pip install -U kaleido

Traceback (most recent call last):
  File "/scratch/alaforgu/longitudinal_experiments/RlVAE/src/training/train_cyclic_loop_comparison.py", line 5580, in _create_interactive_temporal_animation
    fig.write_image(png_filename, width=1600, height=800, scale=2)
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/plotly/basedatatypes.py", line 3835, in write_image
    return pio.write_image(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/plotly/io/_kaleido.py", line 266, in write_image
    img_data = to_image(
               ^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/plotly/io/_kaleido.py", line 132, in to_image
    raise ValueError(
ValueError:
Image export using the "kaleido" engine requires the kaleido package,
which can be installed using pip:
    $ pip install -U kaleido

✨ Flow-based temporal metric evolution visualization created for epoch 0!
🔥 Creating moderate-detail heatmaps...
🌟 Creating MODERATE-DETAIL metric heatmap for epoch 0
📊 Computing metrics on 10000 moderate-resolution grid points...
🎬 Creating INTERACTIVE metric slider visualization with timestep evolution...
🔄 Computing metric fields for timesteps 0 to 7...
📊 Computing DYNAMIC metric heatmaps for each timestep...
   Computing heatmap for timestep 0...
     ✅ Heatmap computed for t=0: det(G) range [1.26e-03, 1.76e+25]
   Computing heatmap for timestep 1...
     🔄 Applying 1 forward flow steps to grid...
       Applying flow 0: z_0 → z_1
     ✅ Grid transformed to timestep 1 coordinate system
     ✅ Heatmap computed for t=1: det(G) range [1.48e-03, 8.77e+25]
   Computing heatmap for timestep 2...
     🔄 Applying 2 forward flow steps to grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
     ✅ Grid transformed to timestep 2 coordinate system
     ✅ Heatmap computed for t=2: det(G) range [6.03e-03, 9.44e+26]
   Computing heatmap for timestep 3...
     🔄 Applying 3 forward flow steps to grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
       Applying flow 2: z_2 → z_3
     ✅ Grid transformed to timestep 3 coordinate system
     ✅ Heatmap computed for t=3: det(G) range [2.08e-03, 1.11e+26]
   Computing heatmap for timestep 4...
     🔄 Applying 4 forward flow steps to grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
       Applying flow 2: z_2 → z_3
       Applying flow 3: z_3 → z_4
     ✅ Grid transformed to timestep 4 coordinate system
     ✅ Heatmap computed for t=4: det(G) range [2.34e-02, 1.26e+26]
   Computing heatmap for timestep 5...
     🔄 Applying 5 forward flow steps to grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
       Applying flow 2: z_2 → z_3
       Applying flow 3: z_3 → z_4
       Applying flow 4: z_4 → z_5
     ✅ Grid transformed to timestep 5 coordinate system
     ✅ Heatmap computed for t=5: det(G) range [3.61e-04, 4.51e+23]
   Computing heatmap for timestep 6...
     🔄 Applying 6 forward flow steps to grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
       Applying flow 2: z_2 → z_3
       Applying flow 3: z_3 → z_4
       Applying flow 4: z_4 → z_5
       Applying flow 5: z_5 → z_6
     ✅ Grid transformed to timestep 6 coordinate system
     ✅ Heatmap computed for t=6: det(G) range [2.70e-03, 1.50e+22]
   Computing heatmap for timestep 7...
     🔄 Applying 7 forward flow steps to grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
       Applying flow 2: z_2 → z_3
       Applying flow 3: z_3 → z_4
       Applying flow 4: z_4 → z_5
       Applying flow 5: z_5 → z_6
       Applying flow 6: z_6 → z_7
     ✅ Grid transformed to timestep 7 coordinate system
     ✅ Heatmap computed for t=7: det(G) range [4.93e-02, 2.02e+23]

/scratch/alaforgu/longitudinal_experiments/RlVAE/src/training/train_cyclic_loop_comparison.py:879: UserWarning:

To copy construct from a tensor, it is recommended to use sourceTensor.detach().clone() or sourceTensor.detach().clone().requires_grad_(True), rather than torch.tensor(sourceTensor).
    ✅ Using FLOW-EVOLVED coordinates for timestep 0
    ✅ Using FLOW-EVOLVED coordinates for timestep 1
    ✅ Using FLOW-EVOLVED coordinates for timestep 2
    ✅ Using FLOW-EVOLVED coordinates for timestep 3
    ✅ Using FLOW-EVOLVED coordinates for timestep 4
    ✅ Using FLOW-EVOLVED coordinates for timestep 5
    ✅ Using FLOW-EVOLVED coordinates for timestep 6
    ✅ Using FLOW-EVOLVED coordinates for timestep 7
   📊 Frame 0: using det_heatmap range [1.26e-03, 1.76e+25]
   📊 Frame 1: using det_heatmap range [1.48e-03, 8.77e+25]
   📊 Frame 2: using det_heatmap range [6.03e-03, 9.44e+26]
   📊 Frame 3: using det_heatmap range [2.08e-03, 1.11e+26]
   📊 Frame 4: using det_heatmap range [2.34e-02, 1.26e+26]
   📊 Frame 5: using det_heatmap range [3.61e-04, 4.51e+23]
   📊 Frame 6: using det_heatmap range [2.70e-03, 1.50e+22]
   📊 Frame 7: using det_heatmap range [4.93e-02, 2.02e+23]
⚠️ Interactive metric slider visualization failed:
Image export using the "kaleido" engine requires the kaleido package,
which can be installed using pip:
    $ pip install -U kaleido

Traceback (most recent call last):
  File "/scratch/alaforgu/longitudinal_experiments/RlVAE/src/training/train_cyclic_loop_comparison.py", line 1156, in _create_interactive_metric_slider_visualization
    fig.write_image(png_filename, width=1600, height=1000, scale=2)
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/plotly/basedatatypes.py", line 3835, in write_image
    return pio.write_image(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/plotly/io/_kaleido.py", line 266, in write_image
    img_data = to_image(
               ^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/plotly/io/_kaleido.py", line 132, in to_image
    raise ValueError(
ValueError:
Image export using the "kaleido" engine requires the kaleido package,
which can be installed using pip:
    $ pip install -U kaleido

✅ Moderate detail metric heatmap created with 10000 points
✅ Epoch 0: Train Loss: 10647.3345, Val Loss: 2846.8766, Cycle: 0.0000
💾 Saved best open model (val_loss: 2846.8766)

🎉 OPEN training completed!

⏭️ Skipping final curvature analysis (disabled by --disable_curvature_during_training)
