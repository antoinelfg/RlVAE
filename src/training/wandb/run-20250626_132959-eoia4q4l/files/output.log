✅ Created open loop trainer for cyclic sequences
   🎯 Experiment: open_cyclic_20250626_132958
   🔁 Loop mode: open
   📊 Cycle penalty: 1.0
   🚀 Riemannian: True (geodesic)

🚀 Starting OPEN loop training on cyclic sequences
Loading cyclic sprites data from /scratch/alaforgu/longitudinal_experiments/RlVAE/data/processed/Sprites_train_cyclic.pt...
Cyclic sprites data shape: torch.Size([3000, 8, 3, 64, 64])
Data range: [0.000, 0.996]
✅ train cyclic dataset size: 2
✅ Final data shape: torch.Size([2, 8, 3, 64, 64])
✅ Final data range: [0.000, 0.996]
🔍 Verifying cyclicity of first 5 sequences:
   Seq 0: MSE = 0.00e+00
   Seq 1: MSE = 0.00e+00
Loading cyclic sprites data from /scratch/alaforgu/longitudinal_experiments/RlVAE/data/processed/Sprites_train_cyclic.pt...
Cyclic sprites data shape: torch.Size([3000, 8, 3, 64, 64])
Data range: [0.000, 0.996]
✅ train cyclic dataset size: 2
✅ Final data shape: torch.Size([2, 8, 3, 64, 64])
✅ Final data range: [0.000, 0.996]
🔍 Verifying cyclicity of first 5 sequences:
   Seq 0: MSE = 0.00e+00
   Seq 1: MSE = 0.00e+00

📈 Epoch 1/1 - OPEN Mode
 ... (more hidden) ...
🧠 USING RIEMANNIAN METRIC-AWARE POSTERIOR (batch_size=1)
🧠 Creating sequence trajectory visualization for epoch 0
🎬 Creating comprehensive reconstruction visualization for epoch 0
🔬 Creating manifold visualizations for epoch 0
📊 Analyzing 1 sequences with 8 timesteps
📍 Computing metrics for timestep 1/8 using flow-evolved coordinates
   Computing G(z) at 50 flow-evolved points...
   ✅ Computed metrics: det(G⁻¹) range [4.56e-26, 1.54e-22]
   ✅ Timestep 0 data collected (metrics: 7 properties)
📍 Computing metrics for timestep 2/8 using flow-evolved coordinates
   Computing G(z) at 50 flow-evolved points...
   ✅ Computed metrics: det(G⁻¹) range [1.02e-27, 8.64e-25]
   ✅ Timestep 1 data collected (metrics: 7 properties)
📍 Computing metrics for timestep 3/8 using flow-evolved coordinates
   Computing G(z) at 50 flow-evolved points...
   ✅ Computed metrics: det(G⁻¹) range [4.97e-28, 1.30e-25]
   ✅ Timestep 2 data collected (metrics: 7 properties)
📍 Computing metrics for timestep 4/8 using flow-evolved coordinates
   Computing G(z) at 50 flow-evolved points...
   ✅ Computed metrics: det(G⁻¹) range [1.87e-26, 5.62e-23]
   ✅ Timestep 3 data collected (metrics: 7 properties)
📍 Computing metrics for timestep 5/8 using flow-evolved coordinates
   Computing G(z) at 50 flow-evolved points...
   ✅ Computed metrics: det(G⁻¹) range [4.77e-26, 9.76e-22]
   ✅ Timestep 4 data collected (metrics: 7 properties)
📍 Computing metrics for timestep 6/8 using flow-evolved coordinates
   Computing G(z) at 50 flow-evolved points...
   ✅ Computed metrics: det(G⁻¹) range [4.47e-27, 1.94e-23]
   ✅ Timestep 5 data collected (metrics: 7 properties)
📍 Computing metrics for timestep 7/8 using flow-evolved coordinates
   Computing G(z) at 50 flow-evolved points...
   ✅ Computed metrics: det(G⁻¹) range [8.04e-27, 4.91e-23]
   ✅ Timestep 6 data collected (metrics: 7 properties)
📍 Computing metrics for timestep 8/8 using flow-evolved coordinates
   Computing G(z) at 50 flow-evolved points...
   ✅ Computed metrics: det(G⁻¹) range [1.17e-26, 1.90e-23]
   ✅ Timestep 7 data collected (metrics: 7 properties)
🎨 Creating visualizations with metrics for 8 timesteps...
📈 Creating enhanced PCA analysis with flow-evolved coordinates...
✅ Enhanced PCA analysis created: 8/8 timesteps have metrics
🔥 Creating enhanced manifold heatmaps with flow-evolved coordinates...
✅ Enhanced manifold heatmaps created
⏱️ Creating temporal metric analysis...
✅ Temporal metric analysis created: 8/8 timesteps analyzed
✨ Manifold visualizations complete for epoch 0
🌍 Creating enhanced geodesic & metric impact visualizations for epoch 0
🌍 Creating INTERACTIVE geodesic slider visualization with timestep evolution...
📊 Computing DYNAMIC geodesic background fields for each timestep...
   Computing background fields for timestep 0...
     ✅ Geodesic background computed for t=0: det(G) range [1.10e+01, 5.01e+01]
   Computing background fields for timestep 1...
     🔄 Applying 1 forward flow steps to geodesic grid...
       Applying flow 0: z_0 → z_1
     ✅ Geodesic grid transformed to timestep 1 coordinate system
     ✅ Geodesic background computed for t=1: det(G) range [2.02e+01, 8.46e+01]
   Computing background fields for timestep 2...
     🔄 Applying 2 forward flow steps to geodesic grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
     ✅ Geodesic grid transformed to timestep 2 coordinate system
     ✅ Geodesic background computed for t=2: det(G) range [2.96e+01, 9.68e+01]
   Computing background fields for timestep 3...
     🔄 Applying 3 forward flow steps to geodesic grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
       Applying flow 2: z_2 → z_3
     ✅ Geodesic grid transformed to timestep 3 coordinate system
     ✅ Geodesic background computed for t=3: det(G) range [1.97e+01, 4.49e+01]
   Computing background fields for timestep 4...
     🔄 Applying 4 forward flow steps to geodesic grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
       Applying flow 2: z_2 → z_3
       Applying flow 3: z_3 → z_4
     ✅ Geodesic grid transformed to timestep 4 coordinate system
     ✅ Geodesic background computed for t=4: det(G) range [1.39e+01, 4.91e+01]
   Computing background fields for timestep 5...
     🔄 Applying 5 forward flow steps to geodesic grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
       Applying flow 2: z_2 → z_3
       Applying flow 3: z_3 → z_4
       Applying flow 4: z_4 → z_5
     ✅ Geodesic grid transformed to timestep 5 coordinate system
     ✅ Geodesic background computed for t=5: det(G) range [1.80e+01, 9.38e+01]
   Computing background fields for timestep 6...
     🔄 Applying 6 forward flow steps to geodesic grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
       Applying flow 2: z_2 → z_3
       Applying flow 3: z_3 → z_4
       Applying flow 4: z_4 → z_5
       Applying flow 5: z_5 → z_6
     ✅ Geodesic grid transformed to timestep 6 coordinate system
     ✅ Geodesic background computed for t=6: det(G) range [1.89e+01, 1.52e+02]
   Computing background fields for timestep 7...
     🔄 Applying 7 forward flow steps to geodesic grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
       Applying flow 2: z_2 → z_3
       Applying flow 3: z_3 → z_4
       Applying flow 4: z_4 → z_5
       Applying flow 5: z_5 → z_6
       Applying flow 6: z_6 → z_7
     ✅ Geodesic grid transformed to timestep 7 coordinate system
     ✅ Geodesic background computed for t=7: det(G) range [1.71e+01, 1.21e+02]
    ✅ Geodesic slider: Using FLOW-EVOLVED coordinates for timestep 0
    ✅ Geodesic slider: Using FLOW-EVOLVED coordinates for timestep 1
    ✅ Geodesic slider: Using FLOW-EVOLVED coordinates for timestep 2
    ✅ Geodesic slider: Using FLOW-EVOLVED coordinates for timestep 3
    ✅ Geodesic slider: Using FLOW-EVOLVED coordinates for timestep 4
    ✅ Geodesic slider: Using FLOW-EVOLVED coordinates for timestep 5
    ✅ Geodesic slider: Using FLOW-EVOLVED coordinates for timestep 6
    ✅ Geodesic slider: Using FLOW-EVOLVED coordinates for timestep 7
   📊 Geodesic frame 0: using det_G background range [1.10e+01, 5.01e+01]
   📊 Geodesic frame 1: using det_G background range [2.02e+01, 8.46e+01]
   📊 Geodesic frame 2: using det_G background range [2.96e+01, 9.68e+01]
   📊 Geodesic frame 3: using det_G background range [1.97e+01, 4.49e+01]
   📊 Geodesic frame 4: using det_G background range [1.39e+01, 4.91e+01]
   📊 Geodesic frame 5: using det_G background range [1.80e+01, 9.38e+01]
   📊 Geodesic frame 6: using det_G background range [1.89e+01, 1.52e+02]
   📊 Geodesic frame 7: using det_G background range [1.71e+01, 1.21e+02]
🌍 Interactive geodesic slider visualization saved: interactive_geodesic_slider_epoch_0.html
   📊 Tracks geodesics, eigenvalue fields, metric ellipses across 8 timesteps
   🎯 Use slider to explore geodesic evolution!
✅ Enhanced geodesic visualization created for epoch 0
✨ Creating FANCY interactive geodesic visualizations...
✨ Creating FANCY interactive geodesic visualizations for epoch 0
✨ Fancy interactive visualization created!
📁 Files: fancy_geodesic_analysis_epoch_0.html (interactive), fancy_geodesic_analysis_epoch_0.png (static)
🎯 Total trajectory points: 141
🎬 Creating TEMPORAL metric evolution visualization...
🌊 Creating FLOW-BASED temporal metric evolution visualization for epoch 0
🌊 Computing flow-based det(G) evolution for 1 sequences with 8 timesteps
📍 Computing base metric det(G(z_i0))...
   Base det(G) range: [5.486e-03, 5.486e-03]
🌊 Propagating det(G) through flow chain...
   Flow step 1: z_0 → z_1
     |J_flow_1| range: [1.194, 1.194]
     det(G) range: [6.551e-03, 6.551e-03]
   Flow step 2: z_1 → z_2
     |J_flow_2| range: [0.959, 0.959]
     det(G) range: [6.283e-03, 6.283e-03]
   Flow step 3: z_2 → z_3
     |J_flow_3| range: [0.804, 0.804]
     det(G) range: [5.049e-03, 5.049e-03]
   Flow step 4: z_3 → z_4
     |J_flow_4| range: [0.873, 0.873]
     det(G) range: [4.408e-03, 4.408e-03]
   Flow step 5: z_4 → z_5
     |J_flow_5| range: [1.103, 1.103]
     det(G) range: [4.861e-03, 4.861e-03]
   Flow step 6: z_5 → z_6
     |J_flow_6| range: [0.883, 0.883]
     det(G) range: [4.291e-03, 4.291e-03]
   Flow step 7: z_6 → z_7
     |J_flow_7| range: [0.957, 0.957]
     det(G) range: [4.108e-03, 4.108e-03]
✅ Flow-based evolution complete!
   Final det(G) range: [4.108e-03, 6.551e-03]
   Det(G) amplification: 0.749x
📊 PCA projection complete (explained variance: 83.2%)
🔥 Computing spatial det(G) heatmaps for each timestep...
   Computing spatial heatmap for timestep 0...
   Computing spatial heatmap for timestep 1...
     ✅ Computed heatmap for t=1: det(G) range [4.05e-02, 9.88e+11]
   Computing spatial heatmap for timestep 2...
     ✅ Computed heatmap for t=2: det(G) range [2.02e-01, 2.67e+13]
   Computing spatial heatmap for timestep 3...
     ✅ Computed heatmap for t=3: det(G) range [4.17e-02, 3.93e+14]
   Computing spatial heatmap for timestep 4...
     ✅ Computed heatmap for t=4: det(G) range [1.38e-02, 4.51e+16]
   Computing spatial heatmap for timestep 5...
     ✅ Computed heatmap for t=5: det(G) range [1.21e-02, 2.47e+15]
   Computing spatial heatmap for timestep 6...
     ✅ Computed heatmap for t=6: det(G) range [1.53e-02, 9.45e+14]
   Computing spatial heatmap for timestep 7...
     ✅ Computed heatmap for t=7: det(G) range [1.39e-01, 9.63e+13]
✅ Computed 8 spatial heatmaps with evolving det(G) fields!
⚠️ Flow-based interactive animation failed: Object of type Frame is not JSON serializable
Traceback (most recent call last):
  File "/scratch/alaforgu/longitudinal_experiments/RlVAE/src/training/train_cyclic_loop_comparison.py", line 5237, in _create_flow_based_interactive_animation
    fig.write_image(png_filename, width=1600, height=900, scale=2)
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/plotly/basedatatypes.py", line 3911, in write_image
    return pio.write_image(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/plotly/io/_kaleido.py", line 509, in write_image
    img_data = to_image(
               ^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/plotly/io/_kaleido.py", line 373, in to_image
    img_bytes = kaleido.calc_fig_sync(
                ^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/kaleido/__init__.py", line 145, in calc_fig_sync
    return _async_thread_run(calc_fig, args=args, kwargs=kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/kaleido/__init__.py", line 138, in _async_thread_run
    raise res
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/kaleido/__init__.py", line 129, in run
    q.put(asyncio.run(func(*args, **kwargs)))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/asyncio/runners.py", line 195, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/asyncio/runners.py", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/asyncio/base_events.py", line 691, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/kaleido/__init__.py", line 55, in calc_fig
    return await k.calc_fig(
           ^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/kaleido/kaleido.py", line 332, in calc_fig
    data = await asyncio.wait_for(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/asyncio/tasks.py", line 520, in wait_for
    return await fut
           ^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/kaleido/_kaleido_tab.py", line 309, in _calc_fig
    result = await tab.send_command("Runtime.callFunctionOn", params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/choreographer/protocol/devtools_async.py", line 222, in send_command
    return await session.send_command(command, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/choreographer/protocol/devtools_async.py", line 95, in send_command
    return await self._broker.write_json(json_command)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/choreographer/_brokers/_async.py", line 259, in write_json
    return await future
           ^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/choreographer/_brokers/_async.py", line 250, in write_json
    await loop.run_in_executor(
  File "/scratch/alaforgu/miniconda3/lib/python3.12/concurrent/futures/thread.py", line 59, in run
    result = self.fn(*self.args, **self.kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/choreographer/channels/pipe.py", line 71, in write_json
    encoded_message = wire.serialize(obj) + b"\0"
                      ^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/choreographer/channels/_wire.py", line 37, in serialize
    message = simplejson.dumps(
              ^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/simplejson/__init__.py", line 395, in dumps
    **kw).encode(obj)
          ^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/simplejson/encoder.py", line 298, in encode
    chunks = self.iterencode(o)
             ^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/simplejson/encoder.py", line 379, in iterencode
    return _iterencode(o, 0)
           ^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/choreographer/channels/_wire.py", line 32, in default
    return simplejson.JSONEncoder.default(self, obj)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/simplejson/encoder.py", line 274, in default
    raise TypeError('Object of type %s is not JSON serializable' %
TypeError: Object of type Frame is not JSON serializable
⚠️ Interactive temporal animation failed: Object of type Frame is not JSON serializable
Traceback (most recent call last):
  File "/scratch/alaforgu/longitudinal_experiments/RlVAE/src/training/train_cyclic_loop_comparison.py", line 5580, in _create_interactive_temporal_animation
    fig.write_image(png_filename, width=1600, height=800, scale=2)
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/plotly/basedatatypes.py", line 3911, in write_image
    return pio.write_image(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/plotly/io/_kaleido.py", line 509, in write_image
    img_data = to_image(
               ^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/plotly/io/_kaleido.py", line 373, in to_image
    img_bytes = kaleido.calc_fig_sync(
                ^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/kaleido/__init__.py", line 145, in calc_fig_sync
    return _async_thread_run(calc_fig, args=args, kwargs=kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/kaleido/__init__.py", line 138, in _async_thread_run
    raise res
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/kaleido/__init__.py", line 129, in run
    q.put(asyncio.run(func(*args, **kwargs)))
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/asyncio/runners.py", line 195, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/asyncio/runners.py", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/asyncio/base_events.py", line 691, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/kaleido/__init__.py", line 55, in calc_fig
    return await k.calc_fig(
           ^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/kaleido/kaleido.py", line 332, in calc_fig
    data = await asyncio.wait_for(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/asyncio/tasks.py", line 520, in wait_for
    return await fut
           ^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/kaleido/_kaleido_tab.py", line 309, in _calc_fig
    result = await tab.send_command("Runtime.callFunctionOn", params=params)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/choreographer/protocol/devtools_async.py", line 222, in send_command
    return await session.send_command(command, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/choreographer/protocol/devtools_async.py", line 95, in send_command
    return await self._broker.write_json(json_command)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/choreographer/_brokers/_async.py", line 259, in write_json
    return await future
           ^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/choreographer/_brokers/_async.py", line 250, in write_json
    await loop.run_in_executor(
  File "/scratch/alaforgu/miniconda3/lib/python3.12/concurrent/futures/thread.py", line 59, in run
    result = self.fn(*self.args, **self.kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/choreographer/channels/pipe.py", line 71, in write_json
    encoded_message = wire.serialize(obj) + b"\0"
                      ^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/choreographer/channels/_wire.py", line 37, in serialize
    message = simplejson.dumps(
              ^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/simplejson/__init__.py", line 395, in dumps
    **kw).encode(obj)
          ^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/simplejson/encoder.py", line 298, in encode
    chunks = self.iterencode(o)
             ^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/simplejson/encoder.py", line 379, in iterencode
    return _iterencode(o, 0)
           ^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/choreographer/channels/_wire.py", line 32, in default
    return simplejson.JSONEncoder.default(self, obj)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/scratch/alaforgu/miniconda3/lib/python3.12/site-packages/simplejson/encoder.py", line 274, in default
    raise TypeError('Object of type %s is not JSON serializable' %
TypeError: Object of type Frame is not JSON serializable
✨ Flow-based temporal metric evolution visualization created for epoch 0!
🔥 Creating moderate-detail heatmaps...
🌟 Creating MODERATE-DETAIL metric heatmap for epoch 0
📊 Computing metrics on 10000 moderate-resolution grid points...
🎬 Creating INTERACTIVE metric slider visualization with timestep evolution...
🔄 Computing metric fields for timesteps 0 to 7...
📊 Computing DYNAMIC metric heatmaps for each timestep...
   Computing heatmap for timestep 0...
     ✅ Heatmap computed for t=0: det(G) range [1.72e+10, 2.03e+21]
   Computing heatmap for timestep 1...
     🔄 Applying 1 forward flow steps to grid...
       Applying flow 0: z_0 → z_1
     ✅ Grid transformed to timestep 1 coordinate system
     ✅ Heatmap computed for t=1: det(G) range [8.98e+11, 6.57e+22]
   Computing heatmap for timestep 2...
     🔄 Applying 2 forward flow steps to grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
     ✅ Grid transformed to timestep 2 coordinate system
     ✅ Heatmap computed for t=2: det(G) range [1.03e+13, 6.31e+25]
   Computing heatmap for timestep 3...
     🔄 Applying 3 forward flow steps to grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
       Applying flow 2: z_2 → z_3
     ✅ Grid transformed to timestep 3 coordinate system
     ✅ Heatmap computed for t=3: det(G) range [2.15e+11, 3.65e+25]
   Computing heatmap for timestep 4...
     🔄 Applying 4 forward flow steps to grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
       Applying flow 2: z_2 → z_3
       Applying flow 3: z_3 → z_4
     ✅ Grid transformed to timestep 4 coordinate system
     ✅ Heatmap computed for t=4: det(G) range [3.41e+11, 3.80e+26]
   Computing heatmap for timestep 5...
     🔄 Applying 5 forward flow steps to grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
       Applying flow 2: z_2 → z_3
       Applying flow 3: z_3 → z_4
       Applying flow 4: z_4 → z_5
     ✅ Grid transformed to timestep 5 coordinate system
     ✅ Heatmap computed for t=5: det(G) range [3.20e+12, 5.16e+27]
   Computing heatmap for timestep 6...
     🔄 Applying 6 forward flow steps to grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
       Applying flow 2: z_2 → z_3
       Applying flow 3: z_3 → z_4
       Applying flow 4: z_4 → z_5
       Applying flow 5: z_5 → z_6
     ✅ Grid transformed to timestep 6 coordinate system
     ✅ Heatmap computed for t=6: det(G) range [2.12e+12, 3.91e+28]
   Computing heatmap for timestep 7...
     🔄 Applying 7 forward flow steps to grid...
       Applying flow 0: z_0 → z_1
       Applying flow 1: z_1 → z_2
       Applying flow 2: z_2 → z_3
       Applying flow 3: z_3 → z_4
       Applying flow 4: z_4 → z_5
       Applying flow 5: z_5 → z_6
       Applying flow 6: z_6 → z_7
     ✅ Grid transformed to timestep 7 coordinate system
     ✅ Heatmap computed for t=7: det(G) range [4.43e+13, 1.15e+28]
/scratch/alaforgu/longitudinal_experiments/RlVAE/src/training/train_cyclic_loop_comparison.py:879: UserWarning:

To copy construct from a tensor, it is recommended to use sourceTensor.detach().clone() or sourceTensor.detach().clone().requires_grad_(True), rather than torch.tensor(sourceTensor).
    ✅ Using FLOW-EVOLVED coordinates for timestep 0
    ✅ Using FLOW-EVOLVED coordinates for timestep 1
    ✅ Using FLOW-EVOLVED coordinates for timestep 2
    ✅ Using FLOW-EVOLVED coordinates for timestep 3
    ✅ Using FLOW-EVOLVED coordinates for timestep 4
    ✅ Using FLOW-EVOLVED coordinates for timestep 5
    ✅ Using FLOW-EVOLVED coordinates for timestep 6
    ✅ Using FLOW-EVOLVED coordinates for timestep 7
   📊 Frame 0: using det_heatmap range [1.72e+10, 2.03e+21]
   📊 Frame 1: using det_heatmap range [8.98e+11, 6.57e+22]
   📊 Frame 2: using det_heatmap range [1.03e+13, 6.31e+25]
   📊 Frame 3: using det_heatmap range [2.15e+11, 3.65e+25]
   📊 Frame 4: using det_heatmap range [3.41e+11, 3.80e+26]
   📊 Frame 5: using det_heatmap range [3.20e+12, 5.16e+27]
   📊 Frame 6: using det_heatmap range [2.12e+12, 3.91e+28]
   📊 Frame 7: using det_heatmap range [4.43e+13, 1.15e+28]
🎬 Interactive metric slider visualization saved: interactive_metric_slider_epoch_0.html
   📊 Tracks det(G), Tr(G), condition number across 8 timesteps
   🎯 Use slider to explore metric evolution!
✅ Moderate detail metric heatmap created with 10000 points
✅ Epoch 0: Train Loss: 18605.9272, Val Loss: 2868.9667, Cycle: 0.0000
💾 Saved best open model (val_loss: 2868.9667)

🎉 OPEN training completed!

⏭️ Skipping final curvature analysis (disabled by --disable_curvature_during_training)
